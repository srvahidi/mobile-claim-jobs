---
source: &prod-source
  cf_deploy_user: ((cf-prd-username))
  cf_deploy_password: ((cf-prd-password))
  artifactory-username: ((artifactory-username))
  artifactory-password: ((artifactory-password))
  cf_app_name: mobile-claims-jobs-prod
  file_prefix: 'mobile-jobs'
  cf_space: 'production'
  cf_env: 'prod'
  instance_number: 2
  memory: 1G
  cf_api: https://api.system-prod.usdc10.axadmin.net
  aspnetcore_environment: Production
  posturi: '/webhook/5503d5d2-5a64-4608-846e-5de063f64b83@c45b48f3-13bb-448b-9356-ba7b863c2189/IncomingWebhook/5317a69812e848d19d263cf5d896f4db/06a1cc28-4450-4b59-82b4-e061ac65ba35'
  cf_organization: mobile_backend
  teams_url: ((teams-webhook-url))
  newrelic_app_lic: ((newrelic-license-key))
  buildpack_one: '- newrelic_dotnet_core_buildpack_latest'
  buildpack_two: '- dotnet_core_buildpack'

resource_types:

- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

- name: teams-notification
  type: docker-image
  source:
    repository: navicore/teams-notification-resource
    tag: latest

- name: cf2
  type: docker-image
  source:
    username: ((proget-user))
    password: ((proget-password))
    repository: ((proget-url))/docker/gdc/cf-resource

resources:    

- name: utility-image
  type: docker-image
  source:
    repository: ((proget-url))/docker/rms/claimsmanagement/dgclaims/mobile-claim-jobs/mobile-utility
    username: ((proget-user))
    password: ((proget-password))
    tag: "latest"

- name: mobile-claims-jobs-artifact
  type: artifactory
  source:
    endpoint: https://na-artifact-01.na.audatex.com:8443/artifactory
    repository: /mobile-backend/mobile-claims-jobs
    regex: "mobile-jobs-(?<version>.*).zip"
    username: ((artifactory-username))
    password: ((artifactory-password))
    skip_ssl_verification: true

- name: cf2-prod
  type: cf2
  source:
    api: ((cf-prd-api))
    username: ((cf-prd-username))
    password: ((cf-prd-password))
    organization: mobile_backend
    space: production
    skip_cert_check: true


- name: teams-alert
  type: teams-notification
  source:
    url: ((teams-webhook-url))

jobs:

- name: deploy-green-prod
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME prod-Green Deploy Failed - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-prod.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - aggregate:
    - get: utility-image
    - get: mbe-wrapper-artifact
      trigger: true
  - task: prepare-manifest
    image: utility-image
    params:
      <<: *prod-source
    config:
      platform: linux
      inputs:
      - name: mbe-wrapper-artifact
      outputs:
      - name: deployables
      run:
        path: sh
        args:
        - -exc
        - |
          output_directory=${PWD}/deployables
          unzip ${PWD}/mbe-wrapper-artifact/mbe-wrapper-*.zip -d ${output_directory}
          manifest_file=${output_directory}/manifest.yml
          sed -i -e "s/\[application_name\]/${cf_app_name}-green/" ${manifest_file}
          sed -i -e "s/\[instances\]/${instance_number}/" ${manifest_file}
          sed -i -e "s/\[memory\]/${memory}/" ${manifest_file}
          sed -i -e "s/\[newrelic_app_name\]/${cf_app_name}/" ${manifest_file}
          sed -i -e "s/\[newrelic_app_lic\]/${newrelic_app_lic}/" ${manifest_file}
          sed -i -e "s~\[media_service_url\]~${media_service_url}~" ${manifest_file}
          sed -i -e "s/\[access_token\]/${access_token}/" ${manifest_file}
          sed -i -e "s/\[app_name\]/${app_name}/" ${manifest_file}
          sed -i -e "s/\[driver_token\]/${driver_token}/" ${manifest_file}
          sed -i -e "s/\[send_photos_to_mbe_core\]/${send_photos_to_mbe_core}/" ${manifest_file}
          sed -i -e "s~\[posturi\]~${posturi}~" ${manifest_file}
          sed -i -e "s/\[validate_token_after\]/${validate_token_after}/" ${manifest_file}
          sed -i -e "s/\[aspnetcore_environment\]/${aspnetcore_environment}/" ${manifest_file}
  - put: cf2-prod
    params:
      manifest: deployables/manifest.yml
      path: deployables/app

- name: smoke-test-green-prod
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-prod.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - aggregate:
    - get: utility-image
    - get: cf2-prod
      trigger: true
      passed:
       - deploy-green-prod
  - task: smoke-tests
    image: utility-image
    params:
      <<: *prod-source
    config:
      platform: linux
      run:
        path: sh
        args:
        - -ec
        - |
          cfpass=$(printenv cf_deploy_password)
          cfuser=$(printenv cf_deploy_user)
          cf login -u $cfuser -p $cfpass -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x

          app_url=$(cf app $cf_app_name-green | grep routes | sed -e 's/routes:\s*/https:\/\//')

          healthcheck_status=$(curl -s -o /dev/null -w "%{http_code}" ${app_url}/api/mbewrapperhealthcheck)
          if [ "$healthcheck_status" != "200" ]; then
            echo "App healthcheck did not respond with OK as expected"
            exit 1
          fi

- name: blue-green-switch
  on_success:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME Prod deployed successfully - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME successful.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-prod.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME Prod Blue-To-Green Switch Failed - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-prod.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - get: utility-image
    version: latest
  - get: cf2-prod
    passed:
      - smoke-test-green-prod
    trigger: true
  - task: blue-to-green
    image: utility-image    
    params:
      <<: *prod-source
      artifactory_endpoint:  https://na-artifact-01.na.audatex.com:8443/artifactory
      artifactory_username: ((artifactory-username))
      artifactory_password: ((artifactory-password)) 
    config:
      platform: linux      
      run:
        path: bash
        args:
        - -exc
        - |  
          set +x
          cfpass=$(printenv cf_deploy_password)
          cfuser=$(printenv cf_deploy_user)

          cf login -u $cfuser -p $cfpass -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x

          greenApps=$(cf apps | grep $cf_app_name-green | { grep -v grep || true; })
          if [[ -z $greenApps ]]; then exit 0; fi

          cf unbind-service $cf_app_name-green dgc-mq-green
          cf unbind-service $cf_app_name dgc-mq
          cf bind-service $cf_app_name-green dgc-mq

          cf map-route $cf_app_name-green apps-$cf_env.usdc10.axadmin.net -n $cf_app_name
          cf unmap-route $cf_app_name apps-$cf_env.usdc10.axadmin.net -n $cf_app_name
          cf unmap-route $cf_app_name-green apps-$cf_env.usdc10.axadmin.net -n $cf_app_name-green

          cf stop $cf_app_name
          cf delete $cf_app_name -f
          # Remove the Green-Temp-Route.
          cf delete-route apps-$cf_env.usdc10.axadmin.net --hostname $cf_app_name-green -f

          # Rename Green app to Blue app.
          cf rename $cf_app_name-green $cf_app_name
          cf restart $cf_app_name

          # autoscaling
          cf bind-service $cf_app_name autoscale
          curl -O -k -u $artifactory_username:$artifactory_password $artifactory_endpoint/devops-local/cf-plugins/autoscaler-linux32-2.0.91
          cf install-plugin autoscaler-linux32-2.0.91 -f
          cf update-autoscaling-limits $cf_app_name 2 4
          cf create-autoscaling-rule $cf_app_name cpu 25 75
          cf enable-autoscaling $cf_app_name